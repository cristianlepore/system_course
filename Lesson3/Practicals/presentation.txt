Welcome everbody to this third session of the lab activity.

******************************

My plan for today is similar to the last week. I have settled 15 minutes presentation then we have about 10 minutes for questions and answers. Eventually, these 10 minutes can be allocated to prepare your laptop for the next activity that is exercises & checkpoints where you have the opportunity to earn your checkpoint. I have allocated 35 minutes for this last activity.

******************************

From the previous week, we studied the function main. In particular, I have presented the two ways of declaring the main function. The easiest way is - int main followed by parenthesis. We have also studied the main function passing the argc and argv arguments. Which stand for argument counter and argument vector.

We studied the compiler. The gcc compiler passing the -Wall argument. Remember that -Wall allows you to show all warnings for your program.

We have seen an example of a first Hello World program.

Finally, we spent a few time describing the printf and scanf functions as well.

******************************

Because the last week I did a quite long presentation. Today I want to keep it a bit shorter because I want to give everybody a chance for getting the checkpoint.

So, I have prepared these two arguments: 
the first is a further overview of the standard input output with the getchar and putchar functions
the second is about arrays

******************************

So, before starting I want to share this concern with you. It is quite clear but is always useful to remind.
Every time you want to learn a new programming language, the best way to do so, is by practicing. Stuying on the book is as important as writing the code by yourself. So, do exercises and try to get more confident with the errors that the compiler returns.

******************************

An alternative way to call the printf and scanf functions is by reading and writing a file or from command line using getchar and putchar functions.

Let's have a look at getchar first.
getchar is a function that does not have any argument.
We just need to write getchar parenthesis and it returns the character read from the standard input - typically from our keyboard.

Because it is a function declared in a system library, actually we do need to import the stdio.h library that we are all familiar with.

******************************

getchar reads the character from the standards input. 
Basically, the compiler halts the program execution, waiting for an input which in this case is from keyboard.

In this example, I have typed the letter 'a', I've stored the letter in a variable C and then I can print out its value on screen by using the printf function as usual along with the placeholder %c which stands for print the first character.
So, my output will be A as espected.

******************************

I can also wrap the returned value into an integer, like in this second case. There is no surprise here, because since the last lesson, we have learnt that both characters and strings, are treated as integers in C.

I can store my character as an integer value while use it as a normal char.
the ASCII table will give us a clue of the convertion.

So, this a question for you guys. If I input the letter A, and I store the result into an integer variable as in line 5. When I call the printf function with %c as placeholder, what will be the aspected output? do you have any idea?

******************************

The output will be the letter A
because as I said, every character is stored as an integer value and here I have printed the character as %c.

******************************

in this case instead, the output will be the integer corresponding to the letter A in the ASCII code. Hence, will be the number 97.
In fact, here I am forcing the compiler to print the integer value by using %d inside the printf function.

this also means that the value returned by getchar is twofold.
I can use the value stored in the variable C as a character or as an integer.

ok? Do we all agree with this?
...
awesome

******************************

the function putchar instead, requires an argument and print out the character.
we can pass an integer value to putchar, but it will always return an integer.

nothing more to say about this function. It is pretty straight forward. You can try it by yourself.

one note:
At the end of getchar and putchar there is an EOF character that must be read.
What is the OEF?
In C reading and writing from standard i/o means reading and writing from a file.
Hence, typing on a keyboard, we are simply writing on a file. By reading a value though, we are reading from a file. Nothing new, right?

EOF means that we have finished to read from a file.

******************************

Actually there is a third way to read and write strings, which uses puts and gets.

By the way, these only work with well formatted strings. So, if we decide to use them, we need to know the whole string.

Here you see an example of puts in action.
I have declared a string and we type on screen the string Hello World. 
Easy.

******************************

For gets the situation is a bit different. Firstly because the gets function is deprecated. It has been substituted by the fgets function.

the fgets requires three arguments. 
The first is the name of our string
The second is the size of the string.
The third is the standard input stream. Typically this is from a shell. but it could also be the name of the file we read from.

******************************

Let's talk about arrays.

Arrays in C are similar to Java. There is only one difference. In Java, the JVM is in charge of handling the memory. So, when we access to a location that does not exist or we are not allowed to, Java returns a warning.

In C, you need to take care about your memory portion, and since the beginning we must declare the array length.

We can declare arrays in two ways: 
- we can declare the array and initialize it at the same time. In line 4 for example, we do not specify any length of the array. Instead, the lenght has implicitly been declared during its initilization.
- or we can declare an array by defining its length.

you can see both on line 4 and 5.

******************************

How do we get access to an array element?
An element is accessed by indexing the array name. This is done by placing the index of the element within square brackets followed the name of the array.

In this case, we can assign a value to an array element.

The above statement assigns the 5th element in the array with a value of 50.0.

******************************

Another way of initializing the array is by using a for loop. So, we iterate accross the array elements and we assign a value to each position.

******************************

Next lesson I am going to give you an overview of the main control flow structures and we are going to see how we declare functions and pass parameters to each function.
