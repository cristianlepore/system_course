Functions

- What is a function? 
    It is a series of statements that have been grouped together and given a name.
- What are the advantages of functions?
    A program can be diveded into small pieces easier to understand
    avoid duplicating code
    a function can be reused for other programs
- How can a function return nothing? How can I declare a void?
    void function_name(){printf("print something");}
- Do you need to use the keyword void between parenthesis if there are no parameters in the function?
    ex: int function(void){return 1;}
    The answer is yes.
- General form of a function?
- Does a function return an array?
    no, it does not
- Local variables declared in the body of a function are local variables, and can't be seen or modified by other functions.
- How can I call a function? give me an example.
- What is a difference between functional and procedural language?
    A function does not have a state. It computes a result from the parameters and no other variable is permanently altered by the execution of the function.
    Procedural lanuages, such as C and Java, functions may alter global variables. This may induce a not so safe programming style because every time I modify a variable, this has impliction on the rest of the programme.
- Can I declare a function after the main function?
    yes, but this is not usually very safe. The declaration precedes the main and the definition of the function is after the main.
- The function prototype does not have to specify the names of the function's parameters, as long as their types are present.
    ex: double average(double, double);
- Does a function return an array? How?
    not, they can't
- If passing a varible to a function does not alter the value of the varible itself. How can I alter a variable?
    using a pointer
- When I use an array as argument, the length of the array can be left unspecified
    ex: int f(int a[]){} /* no length specified */
- The length of the array in a function must be specified as additional argument
- If the length argument exeed the array lenght, we obtain unpredictable behaviour
- If we pass an array and we change elements into the array, this change will be permanent.
- If we pass a multidimentional array, the second dimention is mandatory
- The standard C99 allows us to pass arrays in this way.
    int sum_array(int n, int a[n]){}
    Here the order is relevant
- What is the meaning of the word STATIC when used into an array and the array itself is passed as parameter to a function?
    indicates that the length of the array is at least ....
    ex: int sum_array(int a[static 3], int n){}
    means that the array a has at least length 3
- Instead of return we can use the exit function
