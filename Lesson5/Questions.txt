Functions

- Define what is a function? 
    It is a series of statements that have been grouped together and given a name.
- What are the advantages of functions?
    1. A program can be diveded into small pieces easier to understand
    2. avoid duplicating code
    3. a function can be reused for other programs
- How can a function return nothing?
    using the keyword void
    void function_name(){printf("print something");}
- Describe the general structure of a function?
- Does a function return an array?
    no, it does not
    a function cannot return an array but only a pointer to the array object
- What is a local variables declared in the body of a function? Can this local variable being seen or modified by other functions?
- How can I call a function? give me an example.
- What is a global variable?
- What is a procedural language? Can you give me an example of procedural language?
    Procedural lanuages: such as C and Java, functions may alter global variables. This may induce a not so safe programming style because every time I modify a variable, this has impliction on the rest of the programme.
- Can I declare a function after the main function?
    yes, but this is not usually very safe. The declaration precedes the main and the definition of the function is after the main.
- The function prototype does it need to specify the names of the function's parameters, as long as their types are present?
    no, it does not
    ex: double average(double, double);
- Does a function return an array? How?
    not, they can't. I migh be write the result into a global variable
- If passing a varible to a function does not alter the value of the varible itself. How can I alter a variable?
    using a pointer or global variable
- When I use an array as argument, does the length of the array need to be specified?
    yes
    ex: int f(int a[]){} /* no length specified */
    The length of the array in a function must be specified as additional argument
- What happen if the length of the arguent exceed the array length?
    we obtain an unpredictable behaviour
- If we pass an array and then we change the array's elements into the function, will this change be permanent?
    yes, because arrays are called as reference
- when we pass a multidimentional array to a function, do I need to specify the second dimention of the array?
    Yes, it is always mandatory
- The standard C99 allows us to pass arrays in this way.
int sum_array(int n, int a[n]){}
Can I switch the order??
    No, I the order is relevant
- What is the meaning of the word STATIC when used into an array and the array itself is passed as parameter to a function?
    indicates that the length of the array is at least ....
    ex: int sum_array(int a[static 3], int n){}
    it means that the array a has at least length 3
- What statement can we use instead of the return statement?
    Instead of return we can use the exit function
